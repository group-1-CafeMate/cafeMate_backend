name: Backend CI/CD Pipeline

env:
  DOCKER_BACKEND_IMAGE: ychaocode/django-server
  DOCKER_CELERY_WORKER_IMAGE: ychaocode/celery-worker
  DOCKER_CELERY_BEAT_IMAGE: ychaocode/celery-beat
  BACKEND_CONTAINER_NAME: django-server
  CELERY_WORKER_CONTAINER_NAME: celery-worker
  CELERY_BEAT_CONTAINER_NAME: celery-beat

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.10.15

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Run Unit Tests
        env:
          MYSQL_NAME: test_db
          MYSQL_USER: root
          MYSQL_PASSWORD: root
          MYSQL_HOST: 127.0.0.1
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DEBUG: 'True'
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          EMAIL_HOST_USER: cafemategroup1@gmail.com
          EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
          GSERVICE_SITE_URL: http://localhost:8000
        run: |
          python backend/manage.py test

  build-push-backend:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME_YC }}
          password: ${{ secrets.DOCKER_PASSWORD_YC }}

      - name: Build and Push Backend Docker image
        env:
          IMAGE_TAG: "${{ github.ref_name }}-backend-${{ github.run_id }}"
        run: |
          docker build -t $DOCKER_BACKEND_IMAGE:$IMAGE_TAG -f Dockerfile backend/
          docker push $DOCKER_BACKEND_IMAGE:$IMAGE_TAG

  build-push-celery-worker:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME_YC }}
          password: ${{ secrets.DOCKER_PASSWORD_YC }}

      - name: Build and Push Celery Worker Docker image
        env:
          IMAGE_TAG: "${{ github.ref_name }}-backend-${{ github.run_id }}"
        run: |
          docker build -t $DOCKER_CELERY_WORKER_IMAGE:$IMAGE_TAG -f Dockerfile.celery_worker backend/
          docker push $DOCKER_CELERY_WORKER_IMAGE:$IMAGE_TAG

  build-push-celery-beat:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME_YC }}
          password: ${{ secrets.DOCKER_PASSWORD_YC }}

      - name: Build and Push Celery Beat Docker image
        env:
          IMAGE_TAG: "${{ github.ref_name }}-backend-${{ github.run_id }}"
        run: |
          docker build -t $DOCKER_CELERY_BEAT_IMAGE:$IMAGE_TAG -f Dockerfile.celery_beat backend/
          docker push $DOCKER_CELERY_BEAT_IMAGE:$IMAGE_TAG

  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: [build-push-backend, build-push-celery-worker, build-push-celery-beat]
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            set -e

            # ÊãâÂèñÊúÄÊñ∞Èè°ÂÉè
            docker pull $DOCKER_BACKEND_IMAGE:$IMAGE_TAG
            docker pull $DOCKER_CELERY_WORKER_IMAGE:$IMAGE_TAG
            docker pull $DOCKER_CELERY_BEAT_IMAGE:$IMAGE_TAG

            # Âà™Èô§ËàäÂÆπÂô®
            docker rm -f $BACKEND_CONTAINER_NAME || true
            docker rm -f $CELERY_WORKER_CONTAINER_NAME || true
            docker rm -f $CELERY_BEAT_CONTAINER_NAME || true

            # ÂïüÂãïÊñ∞ÂÆπÂô®
            docker run -d --name $BACKEND_CONTAINER_NAME -p 8000:8000 $DOCKER_BACKEND_IMAGE:$IMAGE_TAG
            docker run -d --name $CELERY_WORKER_CONTAINER_NAME $DOCKER_CELERY_WORKER_IMAGE:$IMAGE_TAG
            docker run -d --name $CELERY_BEAT_CONTAINER_NAME $DOCKER_CELERY_BEAT_IMAGE:$IMAGE_TAG

      - name: Notify Discord on Deployment Success
        if: ${{ success() }}
        uses: appleboy/discord-action@master
        with:
          webhook_id: ${{ secrets.DISCORD_WEBHOOK_ID }}
          webhook_token: ${{ secrets.DISCORD_WEBHOOK_TOKEN }}
          username: 'CI/CD github bot'
          message: |
            **ÈÉ®ÁΩ≤ÁµêÊûúÔºöÊàêÂäü** üéâ
            ÂÆπÂô®Â∑≤Êõ¥Êñ∞‰∏¶Ê≠£Â∏∏ÂïüÂãï„ÄÇ
            Áí∞Â¢ÉÔºö${{ runner.os }}
            Ëß∏Áôº‰∫ã‰ª∂Ôºö${{ github.event_name }}
            ÂàÜÊîØÔºö${{ github.ref }}
            Êèê‰∫§Ôºö${{ github.sha }}

      - name: Notify Discord on Deployment Failure
        if: ${{ failure() }}
        uses: appleboy/discord-action@master
        with:
          webhook_id: ${{ secrets.DISCORD_WEBHOOK_ID }}
          webhook_token: ${{ secrets.DISCORD_WEBHOOK_TOKEN }}
          username: 'CI/CD github bot'
          message: |
            **ÈÉ®ÁΩ≤ÁµêÊûúÔºöÂ§±Êïó** ‚ùå
            Ë´ãÊ™¢Êü•ÈÉ®ÁΩ≤logs‰ª•‰∫ÜËß£Ë©≥ÊÉÖ
            Áí∞Â¢ÉÔºö${{ runner.os }}
            Ëß∏Áôº‰∫ã‰ª∂Ôºö${{ github.event_name }}
            ÂàÜÊîØÔºö${{ github.ref }}
            Êèê‰∫§Ôºö${{ github.sha }}
