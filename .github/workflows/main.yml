name: Backend CI/CD Pipeline

env:
  DOCKER_BACKEND_IMAGE: ychaocode/django-server
  DOCKER_CELERY_WORKER_IMAGE: ychaocode/celery-worker
  DOCKER_CELERY_BEAT_IMAGE: ychaocode/celery-beat
  BACKEND_CONTAINER_NAME: django-server
  CELERY_WORKER_CONTAINER_NAME: celery-worker
  CELERY_BEAT_CONTAINER_NAME: celery-beat

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.10.15

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Run Unit Tests
        env:
          MYSQL_NAME: test_db
          MYSQL_USER: root
          MYSQL_PASSWORD: root
          MYSQL_HOST: 127.0.0.1
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DEBUG: 'True'
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          EMAIL_HOST_USER: cafemategroup1@gmail.com
          EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
          GSERVICE_SITE_URL: http://localhost:8000
        run: |
          python backend/manage.py test

  build-push-backend:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME_YC }}
          password: ${{ secrets.DOCKER_PASSWORD_YC }}

      - name: Build and Push Backend Docker image
        env:
          IMAGE_TAG: "${{ github.ref_name }}-backend-${{ github.run_id }}"
        run: |
          docker build \
            --build-arg MYSQL_NAME=${{ secrets.MYSQL_NAME }} \
            --build-arg MYSQL_USERNAME=${{ secrets.MYSQL_USER }} \
            --build-arg MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
            --build-arg MYSQL_HOST=${{ secrets.MYSQL_HOST }} \
            --build-arg SECRET_KEY=${{ secrets.SECRET_KEY }} \
            --build-arg DEBUG='False' \
            --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --build-arg EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }} \
            --build-arg EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }} \
            --build-arg GSERVICE_SITE_URL=https://cafe.urcafemate.me \
            -t $DOCKER_BACKEND_IMAGE:$IMAGE_TAG -f Dockerfile .
          docker push $DOCKER_BACKEND_IMAGE:$IMAGE_TAG

  build-push-celery-worker:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME_YC }}
          password: ${{ secrets.DOCKER_PASSWORD_YC }}

      - name: Build and Push Celery Worker Docker image
        env:
          IMAGE_TAG: "${{ github.ref_name }}-backend-${{ github.run_id }}"
        run: |
          docker build \
            --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -t ${DOCKER_CELERY_WORKER_IMAGE}:$IMAGE_TAG -f Dockerfile.celery_worker .
          docker push $DOCKER_CELERY_WORKER_IMAGE:$IMAGE_TAG

  build-push-celery-beat:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME_YC }}
          password: ${{ secrets.DOCKER_PASSWORD_YC }}

      - name: Build and Push Celery Beat Docker image
        env:
          IMAGE_TAG: "${{ github.ref_name }}-backend-${{ github.run_id }}"
        run: |
          docker build \
            --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -t $DOCKER_CELERY_BEAT_IMAGE:$IMAGE_TAG -f Dockerfile.celery_beat .
          docker push $DOCKER_CELERY_BEAT_IMAGE:$IMAGE_TAG

  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: [build-push-backend, build-push-celery-worker, build-push-celery-beat]
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Deploy to EC2
        env: 
          IMAGE_TAG: "${{ github.ref_name }}-backend-${{ github.run_id }}"
          DOCKER_BACKEND_IMAGE: ${{ env.DOCKER_BACKEND_IMAGE }}
          DOCKER_CELERY_WORKER_IMAGE: ${{ env.DOCKER_CELERY_WORKER_IMAGE }}
          DOCKER_CELERY_BEAT_IMAGE: ${{ env.DOCKER_CELERY_BEAT_IMAGE }}
          BACKEND_CONTAINER_NAME: ${{ env.BACKEND_CONTAINER_NAME }}
          CELERY_WORKER_CONTAINER_NAME: ${{ env.CELERY_WORKER_CONTAINER_NAME }}
          CELERY_BEAT_CONTAINER_NAME: ${{ env.CELERY_BEAT_CONTAINER_NAME }}
          MYSQL_NAME: ${{ secrets.MYSQL_NAME }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DEBUG: 'False'
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          EMAIL_HOST_USER: cafemategroup1@gmail.com
          EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
          GSERVICE_SITE_URL: https://cafe.urcafemate.me
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          envs: IMAGE_TAG,DOCKER_BACKEND_IMAGE,DOCKER_CELERY_WORKER_IMAGE,DOCKER_CELERY_BEAT_IMAGE,BACKEND_CONTAINER_NAME,CELERY_WORKER_CONTAINER_NAME,CELERY_BEAT_CONTAINER_NAME, MYSQL_NAME, MYSQL_USER, MYSQL_PASSWORD, MYSQL_HOST, SECRET_KEY, DEBUG, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, EMAIL_HOST_USER, EMAIL_HOST_PASSWORD, GSERVICE_SITE_URL
          script: |
            set -e

            # Pull latest images using the IMAGE_TAGs from previous jobs
            docker pull ${DOCKER_BACKEND_IMAGE}:${IMAGE_TAG}
            docker pull ${DOCKER_CELERY_WORKER_IMAGE}:${IMAGE_TAG}
            docker pull ${DOCKER_CELERY_BEAT_IMAGE}:${IMAGE_TAG}

            docker stop ${BACKEND_CONTAINER_NAME} || true
            docker stop ${CELERY_WORKER_CONTAINER_NAME} || true
            docker stop ${CELERY_BEAT_CONTAINER_NAME} || true

            # Stop and remove any containers using port 8000
            docker ps -q --filter publish=8000 | xargs -r docker rm -f
            
            # Stop and remove old containers if they exist (using container names)
            docker ps -q --filter name=${BACKEND_CONTAINER_NAME} | xargs -r docker rm -f
            docker ps -q --filter name=${CELERY_WORKER_CONTAINER_NAME} | xargs -r docker rm -f
            docker ps -q --filter name=${CELERY_BEAT_CONTAINER_NAME} | xargs -r docker rm -f

            # Start new containers
            docker run -d \
                -e MYSQL_NAME=${MYSQL_NAME} \
                -e MYSQL_USER=${MYSQL_USER} \
                -e MYSQL_PASSWORD=${MYSQL_PASSWORD} \
                -e MYSQL_HOST=${MYSQL_HOST} \
                -e SECRET_KEY=${SECRET_KEY} \
                -e DEBUG=${DEBUG} \
                -e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
                -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \
                -e EMAIL_HOST_USER=${EMAIL_HOST_USER} \
                -e EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD} \
                -e GSERVICE_SITE_URL=${GSERVICE_SITE_URL} \
                --name ${BACKEND_CONTAINER_NAME} \
                -p 8000:8000 ${DOCKER_BACKEND_IMAGE}:${IMAGE_TAG}
            -p 8000:8000 ${DOCKER_BACKEND_IMAGE}:${IMAGE_TAG}
            docker run -d \
                -e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
                -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \
                ${DOCKER_CELERY_WORKER_IMAGE}:${IMAGE_TAG}
            docker run -d \
                -e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
                -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \
            ${DOCKER_CELERY_BEAT_IMAGE}:${IMAGE_TAG}

      - name: Notify Discord on Deployment Success
        if: ${{ success() }}
        uses: appleboy/discord-action@master
        with:
          webhook_id: ${{ secrets.DISCORD_WEBHOOK_ID }}
          webhook_token: ${{ secrets.DISCORD_WEBHOOK_TOKEN }}
          username: 'CI/CD GitHub Bot'
          message: |
            **Deployment Status: Success** üéâ
            The containers have been updated and are running.
            Environment: ${{ runner.os }}
            Triggered Event: ${{ github.event_name }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Job Name: Deploy to EC2

      - name: Notify Discord on Deployment Failure
        if: ${{ failure() }}
        uses: appleboy/discord-action@master
        with:
          webhook_id: ${{ secrets.DISCORD_WEBHOOK_ID }}
          webhook_token: ${{ secrets.DISCORD_WEBHOOK_TOKEN }}
          username: 'CI/CD GitHub Bot'
          message: |
            **Deployment Status: Failed** ‚ùå
            Please check the deployment logs for details.
            Environment: ${{ runner.os }}
            Triggered Event: ${{ github.event_name }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Job Name: Deploy to EC2

  notify-job-status:
    runs-on: ubuntu-latest
    needs: [build-push-backend, build-push-celery-worker, build-push-celery-beat, deploy-to-ec2]
    steps:
      - name: Notify Discord of Overall Job Status
        uses: appleboy/discord-action@master
        with:
          webhook_id: ${{ secrets.DISCORD_WEBHOOK_ID }}
          webhook_token: ${{ secrets.DISCORD_WEBHOOK_TOKEN }}
          username: 'CI/CD GitHub Bot'
          message: |
            **CI/CD Pipeline Results**:
            Backend Build & Push: ${{ needs.build-push-backend.result }}
            Celery Worker Build & Push: ${{ needs.build-push-celery-worker.result }}
            Celery Beat Build & Push: ${{ needs.build-push-celery-beat.result }}
            Deploy to EC2: ${{ needs.deploy-to-ec2.result }}

